#!/usr/bin/env ruby

ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../Gemfile', __dir__)
require "bundler/setup" # Set up gems listed in the gems.rb.
Bundler.require
require 'active_support/all'

require 'optparse'
@options = {
  show_progress: true,
  show_info: true,
  keywords: false,
}
@info = {}
OptionParser.new do |opts|
  opts.on("-V", "--version", "Show version information") do
    puts "Version 0.0.1 of the Postzegelbosjes scanner for Ghent"
    exit
  end
  opts.on("-p", "--[no-]progress", "Show progress bar") do |v|
    @options[:show_progress] = v
  end
  opts.on("-i", "--[no-]info", "Show run info") do |v|
    @options[:show_info] = v
  end
  opts.on("--keywords", "Show the list of keywords") do |v|
    @options[:keywords] = v
  end
end.parse!

START_URL = "https://gent.consultatieomgeving.net/Burger/nl/OpenbareOnderzoeken"
KEYWORD_LIST = %w(
  boscompensatie
  rooien
  rooi*
  kap*
  vellen
  bosbalans
  bebossing
  bebossingsplan
)
NEGATIVE_KEYWORD_LIST = %w(
  kapel*
)

KEYWORD_LIST_MATCHES = KEYWORD_LIST.map { |keyword|
  /\A#{keyword.gsub('*', '[[:alpha:]]*')}\Z/i
}
NEGATIVE_KEYWORD_LIST_MATCHES = NEGATIVE_KEYWORD_LIST.map { |keyword|
  /\A#{keyword.gsub('*', '[[:alpha:]]*')}\Z/i
}

if @options[:keywords]
  puts KEYWORD_LIST
  exit
end

agent = Mechanize.new
# agent.cert_store = begin
#   OpenSSL::X509::Store.new.tap do |cert_store|
#     # Download and replace cert store when script fails:
#     # https://curl.se/docs/caextract.html
#     cert_store.add_file File.expand_path('../ssl/certs/cacert.pem', __dir__)
#   end
# end
agent.verify_mode = OpenSSL::SSL::VERIFY_NONE
index_page = agent.get(START_URL)

@info = {
  source: START_URL,
  start_time: Time.now,
}

progressbar = ProgressBar.create if @options[:show_progress]

detected_links = index_page
  .links
  .tap { |links|
    @info[:all_links_count] = links.count
  }
  .select{|l| l.resolved_uri.to_s =~ /Burger\/nl\/OpenbareOnderzoeken\/Details/ }
  .tap { |links|
    if progressbar
      progressbar.total = links.size
    end
    @info[:considered_links_count] = links.count
  }
  .map { |l|
    progressbar.increment if progressbar
    page = l.click
    [
      l,
      page.at('body').text.squish.scan(/\w+/)
    ]
  }
  .map { |l, tokens|
    selected_tokens = tokens
      .select { |token|
        KEYWORD_LIST_MATCHES.any? { |m|
          token =~ m
        }
      }
      .reject { |token|
        NEGATIVE_KEYWORD_LIST_MATCHES.any? { |m|
          token =~ m
        }
      }
    [l, selected_tokens]
  }
  .select { |_, matches|
    matches.any?
  }

progressbar.finish if progressbar

@info[:end_time] = Time.now
@info[:detected_links_count] = detected_links.count

def format_keywords(words)
  words.sort.group_by(&:itself).map {|w, occ| occ.one? ? w : "#{w} (x#{occ.size})" }.join(", ")
end

puts "# Report for #{Time.now.strftime('%Y/%m/%d')}\n\n"

detected_links
  .each { |l, tokens|
    puts <<~TEXT
      ## #{l.text}

      **link:** #{l.resolved_uri}
      **keywords:** #{format_keywords(tokens)}

    TEXT
  }

puts "# Report detail\n\n"

if @options[:show_info]
  puts <<~TEXT
    We scanned #{@info[:source]} and found #{@info[:all_links_count]} links.
    Of those links #{@info[:considered_links_count]} where considered.
    Of those links #{@info[:detected_links_count]} where found to contain one of our keywords.
    It took #{(@info[:end_time] - @info[:start_time]).round} seconds to complete.
  TEXT
end
